"abstract_factory","Creational pattern that provides an interface for creating families of related objects without specifying their concrete classes","hard"
"prototype","Creational pattern that creates new objects by cloning a prototypical instance, avoiding the need to subclass for object creation","hard"
"adapter","Structural pattern that allows objects with incompatible interfaces to collaborate by wrapping one with a translator interface","hard"
"bridge","Structural pattern that separates an abstraction from its implementation, allowing the two to vary independently","hard"
"composite","Structural pattern that treats individual objects and compositions of objects uniformly by arranging them into a tree structure (part-whole hierarchy)","hard"
"decorator","Structural pattern that dynamically adds additional behavior or responsibilities to an object by wrapping it in an object of a decorator class","hard"
"facade","Structural pattern that provides a simplified, unified interface to a complex subsystem, making it easier to use","hard"
"flyweight","Structural pattern that minimizes memory usage by sharing as much data as possible between many fine-grained objects","hard"
"proxy","Structural pattern in which a class functions as an interface or placeholder to control access to another class (the real subject)","hard"
"command","Behavioral pattern that encapsulates a request or action as an object, allowing it to be parameterized, queued, or logged, and supporting undoable operations","hard"
"state","Behavioral pattern that allows an object’s behavior to change when its internal state changes by delegating to different state-specific objects","hard"
"template_method","Behavioral pattern that defines the skeleton of an algorithm in a base class method, allowing subclasses to override certain steps without changing the overall structure","hard"
"visitor","Behavioral pattern that separates an algorithm from the object structure it operates on, allowing new operations to be added without modifying the structures","hard"
"mediator","Behavioral pattern that introduces an intermediary object to handle communication between multiple objects, reducing their direct dependencies (loose coupling)","hard"
"memento","Behavioral pattern that captures an object’s internal state in an external object so that it can be restored later without violating encapsulation","hard"
"interpreter","Behavioral pattern that defines a representation for a grammar and uses an evaluator to interpret or execute sentences in that language","hard"
"chain_of_responsibility","Behavioral pattern in which a request is passed along a chain of handlers until one of them handles it, decoupling the sender from the receiver(s)","hard"
"null_object","Design pattern where an object with no meaningful behavior (no-op) is used in place of a missing real object, avoiding explicit checks for its existence","hard"
"builder","Creational pattern that separates the construction of a complex object from its representation, allowing the same construction process to create different representations","hard"
"RAII","C++ idiom that ties resource management to object lifetime: resources are acquired in a constructor and released in the destructor automatically","hard"
"PIMPL","C++ idiom where a class holds a pointer to its implementation details (defined in a separate source file) to hide private members and reduce compile dependencies","hard"
"CRTP","Idiom where a class template inherits from one of its own template parameters (the derived class), enabling static polymorphism and code reuse at compile time","hard"
"SFINAE","Template metaprogramming principle where certain failed template substitutions are treated as non-errors, allowing the compiler to select other overloads","hard"
"rule_of_three","Guideline which states that if a class defines a destructor, copy constructor, or copy assignment operator, it should define all of them to properly manage resources","hard"
"rule_of_five","Modern guideline extending the rule of three by including the move constructor and move assignment operator – if a class needs any of these special functions, it likely needs all of them","hard"
"rule_of_zero","Design principle encouraging the use of RAII such that a class doesn’t need to declare any custom destructor, copy/move constructor or assignment (letting compiler-generated ones suffice)","hard"
"zero_overhead_principle","C++ design philosophy that higher-level abstractions impose no additional runtime cost compared to lower-level implementations (“you don’t pay for what you don’t use”)","hard"
"copy_and_swap","Idiom for the assignment operator implementation: create a copy of the right-hand object and then exchange its data with the left-hand object, providing strong exception safety","hard"
"type_erasure","Technique that allows code to ignore specific types by treating different types uniformly through a common interface (hiding type differences at compile time, e.g., via std::any or base classes)","hard"
"perfect_forwarding","Template technique that passes function arguments to another function, preserving their lvalue/rvalue nature to avoid unnecessary copying (often using std::forward)","hard"
"rvalue_reference","A C++ reference declared with && that can bind to a temporary object, typically used to enable moving resources instead of copying","hard"
"move_semantics","C++ feature (introduced in C++11) that allows the resources of temporary objects to be moved rather than copied, improving performance by avoiding unnecessary copies","hard"
"static_cast","Compile-time conversion operator used to convert a value to a different type when the conversion is considered safe (e.g., numeric conversions or upcasting)","hard"
"dynamic_cast","Operator that safely converts a base class pointer or reference to a derived class type at runtime, checking the actual object type (returns null or throws on failure)","hard"
"reinterpret_cast","Operator that treats the raw memory of one object as if it were a value of another type; used only for low-level conversions when memory layout is known","hard"
"const_cast","Operator used to remove or add const (or volatile) qualification on a variable, e.g., to call a non-const function on a const object","hard"
"mutex","Synchronization primitive that provides mutual exclusion, allowing only one thread at a time to acquire it and access a shared resource","hard"
"lock_guard","RAII object that acquires a mutex upon creation (constructor) and releases it when destroyed, ensuring a mutex is properly unlocked even if an exception occurs","hard"
"condition_variable","Synchronization utility that allows threads to wait (block) until notified that some condition is true, enabling threads to wait and be notified safely in conjunction with a mutex","hard"
"atomic","Type or operation that is guaranteed to be indivisible (cannot be interrupted) with respect to other threads, allowing lock-free thread-safe operations on basic data types","hard"
"deadlock","Situation in multithreading where two or more threads are each waiting indefinitely for resources locked by the other, so none can proceed","hard"
"race_condition","Flaw where a program’s behavior depends on the interleaving of threads in an unintended way, often due to unsynchronized access to shared data, leading to unpredictable results","hard"
"future","Object that represents the result of an asynchronous operation, which can be waited on (to retrieve the result once it’s ready)","hard"
"promise","Object that can be used to supply a value or exception to a corresponding future, typically used by the producer side of an asynchronous operation to fulfill the result","hard"
"async","Function template (in <future>) that launches a callable potentially in a new thread and returns a future for its result, enabling asynchronous execution","hard"
"weak_ptr","Smart pointer that holds a non-owning reference to an object managed by a std::shared_ptr, which can safely expire if the object is deleted (helps break reference cycles)","hard"
"noexcept","C++ function specifier indicating that a function does not throw exceptions; if it does throw, std::terminate is called","hard"
"volatile","Type qualifier indicating that a variable may be changed externally (e.g., by hardware or another thread) and thus should not be optimized out or cached by the compiler","hard"
"mutable","Class member specifier allowing a member of a const object to be modified; it effectively bypasses the const restriction for that member","hard"
"placement_new","Form of operator new that constructs an object in a pre-allocated memory buffer provided by the caller (accepts a memory address as an argument)","hard"
"template_specialization","Defining a specific implementation of a template for particular template arguments, overriding the general template definition for those types","hard"
"variadic_templates","C++ feature allowing templates to accept an arbitrary number of template parameters (template parameter packs), enabling functions like tuple construction or printf-like templates","hard"
"fold_expression","C++17 feature that combines a parameter pack of arguments using a given operator into a single value (useful in variadic template context, e.g., summing all args)","hard"
"argument_dependent_lookup","C++ name lookup rule where the compiler also searches in the namespace of a function call’s argument types to find a matching function (also called Koenig lookup)","hard"
"multiple_inheritance","Feature of C++ allowing a class to inherit from more than one base class, enabling it to combine behaviors, but potentially introducing complexity such as the diamond issue","hard"
"diamond_problem","Multiple inheritance ambiguity that arises when two parent classes share a common base class, causing the derived class to have duplicate base subobjects, unless virtual inheritance is used","hard"
"virtual_inheritance","Type of inheritance that ensures only one shared base class subobject is present when a class is derived through multiple paths (resolves the diamond problem)","hard"
"vtable","The hidden table of function pointers used by C++ objects with virtual functions to dispatch calls to the appropriate override at runtime","hard"
"enable_if","Template meta-programming utility (in <type_traits>) that defines a type only if a compile-time boolean condition is true, commonly used to enable or disable function overloads based on type traits","hard"
"concept","C++20 feature that defines a compile-time constraint on template parameters (a set of type requirements) which must be satisfied for the template to be instantiated","hard"
"module","C++20 feature that allows grouping code into separately compiled units with exported interfaces, as an alternative to header files for better encapsulation and build times","hard"
"co_await","C++20 coroutine keyword that suspends execution of the coroutine until a given asynchronous operation completes, then resumes from that point","hard"
"rehash","Sets the number of buckets in the hash table to at least the specified number","hard"
"load_factor","Returns the average number of elements per bucket in an unordered container","hard"
"bucket_count","Returns the number of buckets in an unordered container","hard"
"bucket_size","Returns the number of elements in a specific bucket","hard"
"bucket","Returns the bucket index for a specific key","hard"
"hash_function","Returns the hash function used by an unordered container","hard"
"key_eq","Returns the function used to compare keys in an unordered container","hard"
"type_traits","Compile-time utilities for querying and modifying types used in templates","hard"
"tag_dispatching","Technique that selects function overloads using types as compile-time tags","hard"
"expression_templates","Metaprogramming technique to build expression trees at compile time, avoiding temporaries","hard"
"policy_based_design","Template-based technique allowing customization of class behavior via policy classes","hard"
"enable_if","SFINAE utility to enable/disable function overloads or template instantiations","hard"
"conditional","Compile-time selection between two types based on a boolean condition","hard"
"integral_constant","Template that wraps a constant value in a type and is used for compile-time computations","hard"
"stack_trace","Captures and holds a snapshot of the current function call stack at runtime","hard"