"STL","Standard Template Library: the original collection of C++ template classes for common data structures and algorithms (containers, iterators, algorithms, and functors). The STL heavily influenced the C++ Standard Library.","easy"
"accumulate","std::accumulate: function template that folds (accumulates) a range of elements into a single value by repeatedly applying an operation (addition by default).","easy"
"and","An alternative way to write the logical `&&` operator.","easy"
"and_eq","An alternative way to write the `&=` assignment operator.","easy"
"array","std::array: a fixed-size array wrapper (template) that stores elements contiguously (size known at compile time).","easy"
"auto","The compiler deduces the type of a variable from its initializer.","easy"
"bool","A data type that can only store true or false values.","easy"
"break","Breaks out of a loop or a switch block.","easy"
"case","Marks a block of code in switch statements.","easy"
"catch","Catches exceptions generated by try statements.","easy"
"char","A data type that can store a single character.","easy"
"class","Defines a class.","easy"
"compl","An alternative way to write the `~` bitwise operator.","easy"
"const","Defines a variable or parameter as a constant (unchangeable) or specifies that a class method does not modify attributes of the class.","easy"
"continue","Continues to the next iteration of a loop.","easy"
"cout","std::cout: the standard output stream (by default, prints to the console).","easy"
"cerr","std::cerr: the standard error output stream (unbuffered output for error messages to console).","easy"
"cin","std::cin: the standard input stream (by default, connected to keyboard input).","easy"
"default","Specifies the default block of code in a switch statement.","easy"
"delete","Frees dynamic memory.","easy"
"do","Used together with while to create a do/while loop.","easy"
"double","A data type that is usually 64 bits long which can store fractional numbers.","easy"
"else","Used in conditional statements.","easy"
"endl","std::endl: an output manipulator that inserts a newline character into an output stream and flushes it.","easy"
"enum","Declares an enumerated type.","easy"
"false","A boolean value equivalent to 0.","easy"
"float","A data type that is usually 32 bits long which can store fractional numbers.","easy"
"for","Creates a for loop.","easy"
"friend","Specifies classes and functions which have access to private and protected members.","easy"
"function","std::function: a polymorphic function wrapper that can hold any callable target (function, lambda, or functor) of a given signature, allowing storage and invocation through a uniform interface.","easy"
"goto","Jumps to a line of code specified by a label.","easy"
"heap","The area of memory used for dynamic allocation (via new). Objects on the heap persist until freed (delete), unlike stack-allocated objects which have automatic lifetime.","easy"
"if","Makes a conditional statement.","easy"
"include_guard","Also called header guard. A pattern using preprocessor directives (#ifndef, #define, #endif) at the top of a header file to prevent multiple inclusions of the same header in one compilation.","easy"
"inline","A specifier that suggests to the compiler to replace function calls with the function's code (to eliminate call overhead). It also allows the function to be defined in multiple translation units (the definitions must be identical).","easy"
"int","A data type that is usually 32 bits long which can store whole numbers.","easy"
"iterator","An object that allows iterating (traversing) through the elements of a container (similar to a pointer). It can be incremented to move to the next element and dereferenced to access the current element.","easy"
"iterator_traits","std::iterator_traits: a template that provides the types associated with an iterator (such as its value_type, pointer, reference, difference_type, and iterator_category).","easy"
"long","Ensures that an integer is at least 32 bits long (use long long to ensure 64 bits).","easy"
"macro","A fragment of code defined with the preprocessor (using #define). The preprocessor replaces occurrences of the macro name with its expansion in the source code before compilation.","easy"
"map","std::map: an associative container that stores key-value pairs with unique keys sorted by key (usually implemented as a balanced BST).","easy"
"mutable","Allows a class member to be modified even if the object is const.","easy"
"namespace","Declares a namespace.","easy"
"new","Reserves dynamic memory.","easy"
"not","An alternative way to write the logical `!` operator.","easy"
"not_eq","An alternative way to write the `!=` comparison operator.","easy"
"nullptr","The null pointer literal (of type std::nullptr_t) representing an invalid pointer.","easy"
"operator","Used to define or declare an overloaded operator function.","easy"
"or","An alternative way to write the logical `||` operator.","easy"
"or_eq","An alternative way to write the `|=` assignment operator.","easy"
"overloading","Defining multiple functions or operators with the same name but different parameter types or counts. The compiler chooses the appropriate one based on the arguments used at the call site.","easy"
"pair","std::pair: a simple template holding two values (first and second) potentially of different types.","easy"
"pass_by_reference","A parameter passing method where a function receives a reference to the original argument (using reference or pointer). This allows the function to modify the argument or avoid copying it.","easy"
"pass_by_value","A function parameter passing method where the argument's value is copied into the function parameter. Changes to the parameter do not affect the original argument.","easy"
"polymorphism","In OOP, the ability to accept objects of different classes through a uniform interface (usually via base class pointers or references). In C++, achieved via virtual functions allowing derived class methods to be called through a base pointer at runtime.","easy"
"private","An access modifier which makes a member only accessible within the declared class.","easy"
"protected","An access modifier which makes a member only accessible within the declared class and its children.","easy"
"public","An access modifier which makes a member accessible from anywhere.","easy"
"queue","std::queue: a container adaptor providing FIFO (first-in, first-out) queue operations.","easy"
"reference","An alias for another variable. Once a reference is initialized to an object, it refers to that object for its lifetime and cannot be reseated to refer to something else. Using the reference actually accesses the original object.","easy"
"return","Used to return a value from a function.","easy"
"short","Reduces the size of an integer to 16 bits.","easy"
"signed","Specifies that an int or char can represent positive and negative values (this is the default so the keyword is not usually necessary).","easy"
"sizeof","An operator that returns the amount of memory occupied by a variable or data type.","easy"
"span","std::span: a view over a contiguous sequence of elements (like an array or part of a vector) with a given length. It provides array-like access without owning the elements (introduced in C++20).","easy"
"stack","std::stack: a container adaptor providing LIFO (last-in, first-out) stack operations (uses another container like deque internally).","easy"
"static","Specifies that an attribute or method belongs to the class itself instead of instances of the class. Also indicates that a variable in a function retains its value even after the function exits.","easy"
"static_binding","Also known as early binding. Function calls and overload resolution decisions that are made at compile time (e.g., calling non-virtual functions or overloaded functions chosen by static types).","easy"
"struct","Defines a structure.","easy"
"switch","Selects one of many code blocks to be executed.","easy"
"template","Declares a template class or template function.","easy"
"ternary_operator","The conditional operator (?:). It has the form condition ? expr1 : expr2. If condition is true, expr1 is evaluated (and is the result), otherwise expr2 is evaluated. It is a shorthand for an if-else that yields a value.","easy"
"this","A variable that is available inside class methods and constructors which contains a pointer to a class instance.","easy"
"throw","Creates a custom error (exception) which can be caught by a try...catch statement.","easy"
"true","A boolean value equivalent to 1.","easy"
"try","Creates a try...catch statement.","easy"
"typedef","Defines a custom data type.","easy"
"typedef","Defines a custom data type.","easy"
"union","A class type where all members share the same memory location (overlapping storage). Only one member can be used at a time. Often used for low-level data manipulation or memory-saving tricks.","easy"
"unsigned","Specifies that an int or char should only represent positive values which allows for storing numbers up to twice as large.","easy"
"using","Allows names from a namespace to be used without the namespace prefix.","easy"
"vector","std::vector: a dynamic array container that stores elements contiguously and can resize automatically (fast random access).","easy"
"virtual","Specifies that a class method is virtual (can be overridden in derived classes).","easy"
"void","Indicates a function that does not return a value or specifies a pointer to data of unspecified type.","easy"
"while","Creates a while loop.","easy"
"xor","An alternative way to write the `^` bitwise operator.","easy"
"xor_eq","An alternative way to write the `^=` assignment operator.","easy"
