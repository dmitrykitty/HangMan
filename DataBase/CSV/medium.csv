"abstract_class","A class that cannot be instantiated, typically because it has (at least one) pure virtual function. It serves as an interface or base class for derived classes.","medium"
"abstract_data_type","A data type defined by its behavior (operations) rather than its implementation. In practice, it often refers to a class that provides an interface while hiding its implementation details.","medium"
"aggregate","An aggregate class is a struct or class with no user-declared constructors, no private or protected non-static data, no virtual functions, and no base classes. Aggregates can be initialized with brace-enclosed lists of values.","medium"
"alignas","Specifies a type's alignment requirement for variables or structure members.","medium"
"alignof","Yields the alignment (in bytes) required for a given type.","medium"
"allocator","std::allocator: the default memory allocator used by containers, encapsulating allocation and deallocation (can be replaced with custom allocators).","medium"
"allocator_traits","std::allocator_traits: a template providing a standardized way to access certain properties of allocator types (like pointer, size_type, etc.).","medium"
"any","std::any: a container that can hold a value of any copyable type (type-safe retrieval via typeid, introduced in C++17).","medium"
"argument_dependent_lookup","Also known as Koenig lookup. When calling an unqualified function in a template or with certain arguments, the compiler searches not only the current scope but also the namespaces of the types of the arguments for matching function definitions.","medium"
"associative_container","A container (usually set or map) that stores elements in a structure accessible by keys (often sorted or hashed) rather than sequential index.","medium"
"async","std::async: function template that starts an asynchronous task (possibly on a new thread) and returns a std::future for its result.","medium"
"atomic","std::atomic: template providing atomic types (operations on these types are thread-safe and complete without interruption).","medium"
"atomic_flag","std::atomic_flag: a simple atomic boolean flag type that supports test-and-set and clear operations (often used for low-level lock algorithms).","medium"
"bad_alloc","std::bad_alloc: the exception thrown when a memory allocation (operator new) fails (usually due to insufficient memory).","medium"
"bad_cast","std::bad_cast: the exception thrown by dynamic_cast when a cast to a reference type fails (usually wrong type in inheritance hierarchy).","medium"
"bad_typeid","std::bad_typeid: the exception thrown when typeid is used on a null pointer to a polymorphic type.","medium"
"bind","std::bind: function template that creates a new callable by binding specific arguments to an existing function or callable. The result can be called later with the remaining arguments.","medium"
"bidirectional_iterator","An iterator category that can traverse a sequence both forwards and backwards.","medium"
"bit_field","A member of a struct or class that occupies a specified number of bits (e.g., unsigned int flag:1; defines a 1-bit bit field). Bit fields allow memory-efficient storage of flags or small values at the cost of some performance.","medium"
"bitand","An alternative way to write the `&` bitwise operator.","medium"
"bitor","An alternative way to write the `|` bitwise operator.","medium"
"chrono","Header <chrono>: provides utilities for dealing with time, including clocks, time points, and durations.","medium"
"concept","Introduces a compile-time predicate (constraint) on template parameters (C++20).","medium"
"condition_variable","std::condition_variable: a synchronization primitive used to block threads until a notification is received (threads wait for some condition to become true).","medium"
"consteval","Specifies that a function is immediate and must produce a compile-time result (C++20).","medium"
"constexpr","Indicates that the result of a variable or function can be evaluated at compile time.","medium"
"constinit","Ensures a static storage duration variable is initialized at compile time (C++20).","medium"
"continue","Continues to the next iteration of a loop.","medium"
"copy_assignment_operator","An assignment operator (operator=) that copies the contents of one object into another existing object of the same class.","medium"
"copy_constructor","A constructor that initializes an object using another object of the same class (usually of the form ClassName(const ClassName&)).","medium"
"copy_elision","A compiler optimization that omits unnecessary copying or moving of objects. For example, constructing an object directly in the space where it would otherwise be copied (such as in return by value).","medium"
"dangling_pointer","A pointer that does not point to a valid object or memory (for example, pointing to memory that has been freed or to a local variable that has gone out of scope).","medium"
"dangling_reference","Similar to a dangling pointer, but refers to a C++ reference that is bound to an object that no longer exists.","medium"
"default_constructor","A constructor that can be called with no arguments. This includes constructors that have no parameters or all parameters have default values. It initializes an object in a default state.","medium"
"delegating_constructor","A constructor that delegates its initialization to another constructor of the same class. This helps avoid duplicating initialization code by having one constructor call another (C++11 feature).","medium"
"delete","Frees dynamic memory.","medium"
"diamond_problem","The ambiguity that arises in multiple inheritance when two base classes derive from the same grandparent class, leading to two copies of the grandparent. Virtual inheritance is used to avoid this duplication.","medium"
"domain_error","std::domain_error: exception indicating an argument is outside the domain of a function's definition (e.g., sqrt of a negative number).","medium"
"duration","std::chrono::duration: a template class representing a time interval (with a specific tick period and unit).","medium"
"dynamic_binding","Determining the implementation of a virtual function call at runtime based on the actual type of the object (polymorphic behavior).","medium"
"dynamic_cast","A cast used primarily for safely downcasting pointers or references in an inheritance hierarchy. Returns nullptr (for pointers) or throws bad_cast (for references) if the object is not of the target type.","medium"
"enable_if","std::enable_if: a template that defines a typedef (or type alias) only if a compile-time boolean condition is true (commonly used to conditionally enable template overloads).","medium"
"enable_shared_from_this","std::enable_shared_from_this<T>: a base class that provides the ability for an object of type T that is managed by a std::shared_ptr to safely generate std::shared_ptr instances to itself (via shared_from_this) without creating a new shared_ptr (which would incorrectly manage the same object).","medium"
"enum_class","A scoped enumeration (enum class) introduced in C++11. Its enumerator names are local to the enum (not injected into the enclosing scope), and it does not implicitly convert to int, improving type safety.","medium"
"explicit","Prevents implicit conversions for a constructor or operator (must be used explicitly).","medium"
"export","Marks a module interface or (historically) exported template (C++20).","medium"
"extern","Declares a variable or function with external linkage (possibly defined elsewhere).","medium"
"false","A boolean value equivalent to 0.","medium"
"filesystem","Header <filesystem>: provides facilities for interacting with the file system (files, directories, paths), introduced in C++17.","medium"
"flush","std::flush: an output manipulator that flushes an output stream (forces any buffered output to be written out).","medium"
"forward","std::forward: a function template that conditionally casts its argument to an rvalue reference, preserving the original value category (lvalue/rvalue) of a forwarded function argument. Used in template functions to implement perfect forwarding.","medium"
"forward_iterator","An iterator category that can read and traverse forward through a sequence (single-pass, but can be multi-pass meaning multiple iterators can be in use).","medium"
"forward_list","std::forward_list: a singly linked list container allowing efficient insertion and removal at any point (forward traversal only).","medium"
"forwarding_reference","A template parameter of the form T&& (where T is deduced) that can bind to both lvalues and rvalues. Enables perfect forwarding by preserving the value category of arguments (formerly known as universal reference).","medium"
"friend","Specifies classes and functions which have access to private and protected members.","medium"
"functor","An object that acts like a function. In C++ this means a class that overloads operator(), so that its instances can be 'called'.","medium"
"future","std::future: a class template that holds the result of an asynchronous operation (allows retrieving the result once available, e.g., from std::async or std::promise).","medium"
"greater","std::greater: a function object that returns true if the first argument is greater than the second (using >). Often used as a comparator to sort or order containers in descending order.","medium"
"include_guard","Also called header guard. A pattern using preprocessor directives (#ifndef, #define, #endif) at the top of a header file to prevent multiple inclusions of the same header in one compilation.","medium"
"inheritance","An OOP feature where a class (derived class) extends or inherits from another class (base class), obtaining its properties and behaviors (members).","medium"
"invalid_argument","std::invalid_argument: exception indicating an invalid argument was passed to a function (e.g., stoi given non-digit characters).","medium"
"istream","std::istream: input stream class template (base for input streams like ifstream or cin).","medium"
"lambda","A lambda expression defines an anonymous function (a function literal) directly in the code. It can capture variables from its surrounding scope and is often used for short callback or predicate functions (introduced in C++11).","medium"
"length_error","std::length_error: exception thrown when an attempt is made to create a container larger than its maximum size or other length-related issues.","medium"
"linker","A tool in the build process that takes compiled object files and libraries and links them together into a final executable or library, resolving symbol references between them.","medium"
"list","std::list: a doubly linked list container allowing efficient insertion and removal from anywhere in the sequence (no random access).","medium"
"lock_guard","std::lock_guard: a simple RAII wrapper that holds a mutex lock for the duration of a scoped block (locks in constructor, unlocks in destructor).","medium"
"logic_error","std::logic_error: a general exception class indicating errors in program logic (e.g., violating function preconditions).","medium"
"make_shared","std::make_shared: function template that creates a new object and returns a std::shared_ptr to it. It performs a single memory allocation for both the object and the control block, which can be more efficient.","medium"
"make_unique","std::make_unique: function template (C++14) that creates a new object and returns a std::unique_ptr to it. It simplifies code and ensures exception safety in object creation.","medium"
"max_element","std::max_element: returns an iterator to the largest element in a range.","medium"
"memory_leak","A situation where a program allocates memory (on the heap) but fails to release it. Over time, such unreleased memory accumulates, reducing available memory.","medium"
"min_element","std::min_element: returns an iterator to the smallest element in a range.","medium"
"module","Introduces a module name and marks the beginning of a module interface or implementation (C++20 feature to organize code into modules instead of using headers).","medium"
"move_constructor","A constructor that takes an rvalue reference to the same class (ClassName(ClassName&&)) and transfers (moves) the resources from the source object to the new object, leaving the source in a valid but unspecified state.","medium"
"move_assignment_operator","An assignment operator (operator=) that takes an rvalue reference to the same class and transfers (moves) resources from the source object to the target object (freeing target's old resources).","medium"
"move_semantics","C++11 feature/idiom that allows the transfer of resources from one object to another (using move constructors and move assignment) instead of copying, improving efficiency by reusing existing resources.","medium"
"mutable","Allows a class member to be modified even if the object is const.","medium"
"namespace","Declares a namespace.","medium"
"new","Reserves dynamic memory.","medium"
"noexcept","Specifies that a function does not throw exceptions (or will terminate if one is thrown).","medium"
"not","An alternative way to write the logical `!` operator.","medium"
"not_eq","An alternative way to write the `!=` comparison operator.","medium"
"object_slicing","Occurs when a derived class object is copied into a base class object by value. The base class object 'slices off' the part of the object that is unique to the derived class, resulting in loss of data and polymorphic behavior.","medium"
"one_definition_rule","The rule that each variable, function, class, etc. should have exactly one definition in the entire program (across all translation units). Violating the ODR leads to undefined behavior or linker errors.","medium"
"optional","std::optional: a wrapper that contains either a value or no value (used for optional return values, introduced in C++17).","medium"
"or","An alternative way to write the logical `||` operator.","medium"
"or_eq","An alternative way to write the `|=` assignment operator.","medium"
"ostream","std::ostream: output stream class template (base for output streams like ofstream or cout).","medium"
"out_of_range","std::out_of_range: exception thrown to indicate a range error (like an index out of bounds on a container).","medium"
"overflow_error","std::overflow_error: exception thrown when a value overflow occurs (e.g., arithmetic result too large to represent).","medium"
"override","Specifies that a virtual function overrides a base class method (C++11).","medium"
"package_task","std::packaged_task: a class template that wraps a function or callable, allowing its execution to be deferred and its result retrieved via a std::future.","medium"
"placement_new","A form of new operator that constructs an object in a pre-allocated memory buffer. It takes a memory address as additional argument and uses that memory for the new object instead of allocating fresh memory.","medium"
"priority_queue","std::priority_queue: a container adaptor providing a max-heap by default (top element is the greatest).","medium"
"protected","An access modifier which makes a member only accessible within the declared class and its children.","medium"
"public","An access modifier which makes a member accessible from anywhere.","medium"
"queue","std::queue: a container adaptor providing FIFO (first-in, first-out) queue operations.","medium"
"range_error","std::range_error: exception indicating a range error in internal computations (e.g., result not representable due to range constraints).","medium"
"range_based_for_loop","The C++11 \"for (element : range)\" loop syntax that iterates over each element in a container or range, simplifying loop syntax by eliminating boilerplate iterator code.","medium"
"reference_wrapper","std::reference_wrapper<T>: a class template that wraps a reference to an object of type T in a copyable object. It is commonly used to store references in standard containers or to pass references where values are expected.","medium"
"register","Suggests to the compiler to use a CPU register for the variable (mostly ignored now).","medium"
"reinterpret_cast","A cast that reinterprets the raw bits of one pointer or integral type as another type. Used for low-level casts (e.g., between incompatible pointer types).","medium"
"requires","Introduces template constraints or a requires clause in a concept definition (C++20).","medium"
"return_value_optimization","RVO: a compiler optimization that eliminates the temporary object when returning a local object by value. The object is constructed directly in the space allocated for the return value (no copy or move needed).","medium"
"runtime_error","std::runtime_error: a general exception class indicating errors detected during runtime (that cannot be easily predicted by logic, e.g., I/O errors).","medium"
"shared_mutex","std::shared_mutex: a mutex that supports multiple readers (shared locks) or one writer (exclusive lock) at a time (C++17).","medium"
"shared_lock","std::shared_lock: an RAII lock for shared_mutex that holds a shared (reader) lock, allowing multiple concurrent readers (C++17).","medium"
"short","Reduces the size of an integer to 16 bits.","medium"
"shuffle","std::shuffle: randomly rearranges the elements in a range (given a random number generator, C++11).","medium"
"signed","Specifies that an int or char can represent positive and negative values (this is the default so the keyword is not usually necessary).","medium"
"size_t","An unsigned integer type used to represent sizes and counts (the type of sizeof). It is guaranteed to be big enough to represent the size of any object in memory.","medium"
"span","std::span: a view over a contiguous sequence of elements (like an array or part of a vector) with a given length. It provides array-like access without owning the elements (introduced in C++20).","medium"
"spaceship_operator","The three-way comparison operator (<=>) introduced in C++20. It returns a comparison category (e.g., std::strong_ordering) indicating whether two values are less, equal, or greater in a single operation.","medium"
"static_assert","Checks a condition at compile time and produces a compile error if false (C++11).","medium"
"static_cast","A cast that performs compile-time type conversions, such as narrowing numeric casts or upcasting pointers in class hierarchies. Safer than reinterpret_cast, but no runtime type check like dynamic_cast.","medium"
"strict_aliasing","A rule in C++ (inherited from C) that assumes pointers of different types (except certain exceptions) do not point to the same memory. Violating this rule (type-punning without proper methods) leads to undefined behavior but allows compilers to optimize based on the assumption.","medium"
"string_view","std::string_view: a lightweight non-owning view of a sequence of characters (like a pointer+length pair, C++17).","medium"
"struct","Defines a structure.","medium"
"swap","std::swap: exchanges the values of two objects. After calling swap(x, y), x will hold y's original value and y will hold x's original value.","medium"
"template_specialization","Providing a specific implementation of a template for particular template parameters. A full specialization replaces the generic template for the specified type(s).","medium"
"ternary_operator","The conditional operator (?:). It has the form condition ? expr1 : expr2. If condition is true, expr1 is evaluated (and is the result), otherwise expr2 is evaluated. It is a shorthand for an if-else that yields a value.","medium"
"thread_local","Specifies that a variable is stored per thread (each thread has its own instance, C++11).","medium"
"time_point","std::chrono::time_point: a point in time, typically represented as an offset since a particular clock's epoch.","medium"

