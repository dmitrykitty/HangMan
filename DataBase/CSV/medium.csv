"inheritance","OOP mechanism where one class derives from another, inheriting its properties and behaviors","medium"
"polymorphism","OOP capability that allows one interface to be used for different underlying types (e.g., virtual functions enabling dynamic binding)","medium"
"encapsulation","OOP principle of hiding internal data and implementation details of an object, exposing only a defined interface","medium"
"abstraction","OOP concept of simplifying complexity by modeling relevant features and ignoring unnecessary details","medium"
"overloading","Using the same function or operator name for different purposes, distinguished by different parameter types or counts","medium"
"overriding","Providing a new implementation for a virtual function in a derived class, replacing the base class’s version","medium"
"virtual","Keyword indicating that a class method can be overridden in derived classes, enabling runtime polymorphic behavior","medium"
"abstract_class","A class that cannot be instantiated because it declares one or more functions without implementations (pure virtual functions)","medium"
"friend","Keyword allowing a non-member function or another class to access the private members of a class","medium"
"static","Keyword indicating that a variable or function has a lifetime or scope spanning the entire program or a single class, rather than per instance or block","medium"
"template","C++ feature that allows writing generic code with placeholders for types or values, which are specified when the template is used","medium"
"exception","An error or unexpected condition that can be thrown and potentially caught by specialized handling code","medium"
"throw","Statement used to signal an exceptional condition by creating and propagating an exception object","medium"
"catch","Clause that catches and handles an exception thrown by a preceding try block, matching by type","medium"
"using","C++ keyword used to introduce a name from a namespace into the current scope or to create a type alias (C++11)","medium"
"typedef","Legacy keyword used to create an alias for an existing type","medium"
"namespace","Feature allowing grouping of related identifiers (types, functions, etc.) under a named scope to avoid naming conflicts","medium"
"inline","Keyword suggesting that a function’s code be expanded at the call site to avoid the overhead of a function call","medium"
"auto","Keyword that enables type inference for variable declarations, letting the compiler deduce the type from the initializer","medium"
"union","A user-defined type where all members share the same memory location, meaning only one member’s value is stored at a time","medium"
"fopen","C library function that returns a FILE pointer for a given file name and mode (used to open a file)","medium"
"fclose","C library function that closes an open file, releasing the file pointer and associated resources","medium"
"fstream","C++ library class for file I/O, providing ifstream for reading from files and ofstream for writing to files","medium"
"cerr","Standard output stream (like cout) designated for error messages; typically unbuffered and auto-flushed","medium"
"list","STL container implemented as a doubly linked chain of elements, allowing efficient insertion and removal at any position, but not random access","medium"
"deque","STL sequence container supporting efficient insertion and deletion at both ends (double-ended queue)","medium"
"stack","Container adaptor providing a last-in, first-out data structure (elements can only be added or removed from the top)","medium"
"queue","Container adaptor providing a first-in, first-out data structure (elements are added at the back and removed from the front)","medium"
"iterator","Object similar to a pointer that can traverse the elements of a container; used to access container items sequentially","medium"
"lambda","An inline, unnamed function (closure) defined within an expression, which can capture variables from its surrounding scope (C++11)","medium"
"functor","An object that behaves like a function, achieved by overloading the function call operator ()","medium"
"function_pointer","Variable that stores the address of a function, allowing the function to be invoked indirectly through it","medium"
"pointer_arithmetic","Performing arithmetic on an address value to navigate through an array or memory buffer","medium"
"dangling_pointer","A memory reference that remains after the storage it pointed to has been freed or otherwise become invalid","medium"
"memory_leak","Programming bug where allocated resources are never freed, eventually causing exhaustion of available resources","medium"
"buffer_overflow","Error that occurs when writing or reading past the end of an array’s allocated memory, causing memory corruption","medium"
"segmentation_fault","Runtime crash caused by accessing memory that the program does not have rights to (e.g., dereferencing a bad or NULL pointer)","medium"
"heap","The area of memory used for dynamic allocation, managed manually with new/delete or malloc/free","medium"
"thread","An independent path of execution that can run concurrently with other threads within the same program","medium"
"singleton","Creational design pattern that ensures a class has only one instance and provides a global point of access to that instance","medium"
"factory_method","Creational pattern in which a function or method is responsible for creating objects, allowing subclasses to decide which specific class to instantiate","medium"
"observer","Behavioral pattern where an object (subject) maintains a list of dependents (observers) and notifies them of state changes, usually by calling one of their methods","medium"
"strategy","Behavioral pattern that defines a family of interchangeable algorithms, encapsulates each one, and allows them to be swapped during runtime to alter behavior","medium"
"macro","A preprocessor substitution defined by #define that replaces a token with a given text before compilation","medium"
"preprocessor","Compilation phase that processes directives (like #include or #define) before the actual compilation, handling file inclusion and macro expansion","medium"
"include_guard","Pattern using preprocessor directives to prevent a header file from being included more than once (often with #ifndef/#define/#endif)","medium"
"pass_by_value","Function parameter passing method where the function receives a copy of the argument, so modifications do not affect the caller’s variable","medium"
"pass_by_reference","Function parameter passing method where the function can modify the caller’s variable because it receives access (via pointer or reference) to the original","medium"
"recursion","Technique in which a function calls itself (directly or indirectly) to solve a problem by breaking it into subproblems","medium"
"algorithm","Standard library header providing common routines (such as sorting and searching) that operate on container elements via iterators","medium"
"explicit","Keyword used to mark a constructor or conversion operator so that it cannot be called implicitly (to avoid unintended conversions)","medium"
"constexpr","Keyword (C++11) indicating that a variable or function can be evaluated at compile time if possible, enabling compile-time constants","medium"
"unique_ptr","C++ smart pointer that exclusively owns a dynamically allocated object and automatically deletes it when it goes out of scope","medium"
"shared_ptr","C++ smart pointer that maintains a reference count to share ownership of a dynamically allocated object, deleting it when the count drops to zero","medium"
"lvalue","An expression that refers to a memory location (has an address) and can appear on the left side of an assignment, e.g., variables","medium"
"rvalue","An expression that is a temporary value or literal and cannot be assigned to, typically on the right side of an assignment","medium"
"reinterpret_cast","Low-level conversion operator that treats a memory location as if it were a different, unrelated type; dangerous but sometimes necessary in systems code","medium"
"const_cast","Cast operator that adds or removes const or volatile qualifiers from a variable, allowing modification of values that are otherwise constant-qualified","medium"
"splice","Transfers elements from one list into another without creating or destroying them","medium"
"merge","Combines two sorted lists into one sorted list without copying","medium"
"unique","Removes consecutive duplicate elements from a container","medium"
"remove","Erases all elements equal to a specified value from a list","medium"
"sort","Sorts the elements of a container using a comparator or operator<","medium"
"emplace","Constructs an element in-place at a specific location","medium"
"emplace_back","Constructs an element in-place at the end of the container","medium"
"emplace_front","Constructs an element in-place at the beginning of the container","medium"
"push_front","Adds an element to the beginning of the container","medium"
"pop_front","Removes the first element from the container","medium"
"capacity","Returns the current capacity of a container before it must allocate more memory","medium"
"shrink_to_fit","Requests to reduce capacity to match the current size","medium"
"reserve","Increases the capacity of the container to at least the specified amount","medium"
"value_type","Type alias representing the element type stored in a container or iterator","medium"
"iterator_category","Trait that indicates the capabilities of an iterator (e.g., random access)","medium"
"difference_type","Type used to represent the distance between iterators","medium"
"pointer","Type alias for a pointer to an element in a container or iterator","medium"
"reference","Type alias for a reference to an element in a container or iterator","medium"
"allocator_type","Type alias for the allocator used by the container","medium"
"is_same","Trait that determines if two types are exactly the same","medium"
"is_integral","Trait that checks whether a type is an integral type (int, char, etc.)","medium"
"is_pointer","Trait that checks whether a type is a pointer","medium"
"is_const","Trait that checks whether a type is const-qualified","medium"
"remove_reference","Trait that removes reference qualifiers from a type","medium"
"decay","Trait that transforms a type to its simplest form used in function arguments","medium"
"stringstream","Stream class to operate on strings like files using stream operations","medium"
"unordered_map","Hash table-based associative container providing average constant-time lookup","medium"
"multimap","Associative container that allows multiple elements with the same key","medium"
"multiset","Sorted associative container that allows duplicate elements","medium"
"bitset","Fixed-size sequence of bits that supports bitwise operations","medium"
"priority_queue","Container adaptor that provides constant time access to the largest element","medium"
"default_constructor","Constructor that can be called without arguments","medium"
"copy_constructor","Constructor that creates a new object as a copy of an existing object","medium"
"move_constructor","Constructor that transfers resources from a temporary object to a new one","medium"
"copy_assignment","Assignment operator that copies data from one object to another existing one","medium"
"move_assignment","Assignment operator that transfers resources from a temporary object","medium"
